name: Deploy

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Docker image tag to deploy'
        default: v1.0.0
        required: true
        type: string
      environment:
        description: 'Environment to deploy release_version'
        default: 'stage'
        required: true
        type: choice
        options:
        - stage
        - production

  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

jobs:
  update-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Set which environment to deploy
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'stage' }}"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      # Get latest release tag from main (for auto deploy on workflow_run)
      - name: Get latest release
        id: get_latest_release
        run: |
          # Fetch the latest release using GitHub API
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | \
            grep '"tag_name":' | \
            sed -E 's/.*"tag_name": "([^"]+)".*/\1/')

          if [ -z "$LATEST_RELEASE" ]; then
            echo "::error::No releases found in the repository."
            exit 1
          fi

          echo "Latest release found: $LATEST_RELEASE"
          echo "::set-output name=latest_release::$LATEST_RELEASE"

      # Validate which tag to use, input value takes priority
      - name: Validate tag version
        id: validate_tag
        run: |
          if [[ -n "${{ github.event.inputs.release_version }}" ]]; then
            RELEASE_VERSION="${{ github.event.inputs.release_version }}"
          else
            RELEASE_VERSION="${{ steps.get_latest_release.outputs.latest_release }}"
          fi

          if [[ ! "$RELEASE_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid tag format. Must follow semantic versioning (vX.Y.Z)."
            exit 1
          fi

          # Check if the release exists
          RELEASE_EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_VERSION") 

          if [[ "$(echo $RELEASE_EXISTS | jq -r .message)" == "Not Found" ]]; then
            echo "::error::Release $RELEASE_VERSION does not exist in the repository."
            exit 1
          fi

          echo "Release to deploy: $RELEASE_VERSION"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV


      - name: Deploying using your config...
        run: |
          echo "Deploying $RELEASE_VERSION" to env $ENVIRONMENT
