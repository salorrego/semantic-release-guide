name: CI Pipeline

on:
  push:
    branches:
      - "**" # Run for all branches

jobs:
  build-and-test:
    # Replace ubuntu latest for an specific version so you can reproduce error if required
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Se tup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          ## Use latest Node.js 22
          node-version: "22.x"

      - name: Install dependencies
        # Clean Install
        run: npm ci

      # Cache node_modules to use install only once
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      # Check if commit message is a conventional commit message
      - name: Commit Lint
        # This will check your last commit and return an error if invalid or a positive output if valid.
        run: npx commitlint --from HEAD~0 --to HEAD --verbose

      # Run build of the app (as this step you can add audit, linter or any other step you want to check)
      - name: Run build
        run: npm run build

      # Replace with your test coverage command
      - name: Run Tests with coverage
        id: tests
        # If you have another command for your tests run it here
        run: npm test
        continue-on-error: false

      # Add one for each folder you require to upload
      - name: Upload Test Coverage
        # Run even if tests fail
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Coverage
          path: coverage

  release:
    # Run only for main branch push
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    # Replace ubuntu latest for an specific version so you can reproduce error if required
    runs-on: ubuntu-latest
    # Required to generate releases
    permissions:
      contents: write
      issues: write
      packages: write
      pull-requests: write
    outputs:
      release_created: ${{ steps.check_release.outputs.release_created }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Restore Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Run Semantic Release
        env:
          # this env var is provided by github actions, for other CI you may require to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
          # Capture the output of semantic-release
          RELEASE_CREATED="$([ $? -eq 0 ] && echo 'true' || echo 'false')"
          VERSION=$(git tag --sort=-creatordate | head -n 1) #gets the latest tag
          echo "RELEASE_CREATED=$RELEASE_CREATED" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=release_created::$RELEASE_CREATED"
          echo "::set-output name=version::$VERSION"

  push-docker-to-ecr:
  # Only push when new main release is generated
    if: github.ref == 'refs/heads/main' && needs.semantic_release.outputs.release_created == 'true'
    needs: release
    runs-on: ubuntu-latest

    permissions:
      id-token: write # Required for OIDC authentication (AWS)
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Requires to have the AWS_ACCOUNT_ID, AWS_ROLE_NAME and AWS_REGION set up on github as secrets
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get commit SHA
        # you can also use the commit sha as the image to be pushed (only one name is required, but you can use the commit and tag)
        id: get_commit_sha
        run: |
          commit_sha=$(git rev-parse --short HEAD)
          echo "Latest commit SHA: $commit_sha"
          echo "COMMIT_TAG=$commit_sha" >> $GITHUB_ENV

      - name: Build, Tag, and Push Docker Image
        env:
          # secret AWS_ECR_REPOSITORY is also required as you need to know which registry to push to
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: "${{ needs.release.outputs.version }}"
          COMMIT_TAG: ${{ env.COMMIT_TAG }}
        run: |
          # Build the Docker image using the Dockerfile from the root
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:$COMMIT_TAG --target prod .

          # Push both the GitHub tag and latest tag
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$COMMIT_TAG

          # Save tag for next workflow
          echo $IMAGE_TAG > image_tag.txt

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: image_tag
          path: image_tag.txt
          retention-days: 1

      - name: Post-Action Cleanup
        run: |
          docker image prune -f  # Optional cleanup
